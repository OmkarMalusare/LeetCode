/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public int eraseOverlapIntervals(Interval[] intervals) {
        if (intervals.length == 0)  
            return 0;

        Arrays.sort(intervals, new NewComparator());
        int end = Integer.MIN_VALUE;
        int count = 0;        

        for (Interval newintervals : intervals) {
            if (newintervals.start >= end) 
                end = newintervals.end;
            else
             count++;
            //count keeps track of the intervals which have to be removed
        }
        return count;
    }
    
    
}
class NewComparator implements Comparator<Interval> {
        public int compare(Interval x, Interval y) {
            return x.end - y.end;
            //sort the interval as per the end times 
        }
    }




