class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        
       if(numCourses < 1 || prerequisites == null || prerequisites.length == 0)
           return true;
        
        Map<Integer, List<Integer>> preReqGraph = new HashMap<>();
        boolean [] visited = new boolean[numCourses];
        boolean [] recursionStack = new boolean[numCourses];
        
        for(int [] each: prerequisites){
            
            List<Integer> courses;
            
            if(!preReqGraph.containsKey(each[1])){
                
                courses = new ArrayList<>();
                courses.add(each[0]);
                preReqGraph.put(each[1], courses);                
            }
            else{
                
               courses =  preReqGraph.get(each[1]);
               courses.add(each[0]);
            }
            
        }
        
        for(int i=0; i<numCourses; i++){  
            
            if(!preReqGraph.containsKey(i))
                continue;
            
            if(canFinishHelper(preReqGraph, i, visited, recursionStack))
                return false;            
        }
        
        
        return true;
    }
    
    public boolean  canFinishHelper(Map<Integer, List<Integer>> preReqGraph, int source, boolean [] visited, boolean []  recursionStack){
        
        
        if(recursionStack[source])
            return true;
        
        if(visited[source])
            return false;
        
        visited[source] = true;
        recursionStack[source] = true;
        
        for(int neighbours: preReqGraph.get(source)){
            
            if(!preReqGraph.containsKey(neighbours))
                continue;
            
             if(canFinishHelper(preReqGraph, neighbours, visited, recursionStack))
                return true;   
        }
        
        recursionStack[source] = false;
        
        return false;
        
    }
}
