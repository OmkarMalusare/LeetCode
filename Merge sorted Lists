/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 
 //The logic here is that merge, l1 and l2 are just helping us get the pointers of new node to retrieve their values. 
 //Head is keeping the track of the merged list

 
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode head = new ListNode(0); // dummy value which will be neglected when we return
        ListNode merge = head;
          while(l1!=null || l2!=null){
           if(l1!=null && l2!=null)  
           {
              if(l1.val< l2.val) 
           {
             merge.next = l1; 
              l1=l1.next; //l1 points to the next element in List1
           }
            else
            {
           merge.next = l2;
            l2=l2.next;
            } 
             merge = merge.next;  
           }
          else if (l1==null && l2!=null){
            merge.next = l2;
            break;
        }
         else if (l2==null && l1!=null){
            merge.next = l1;
            break;
         }
       
          }  
        return head.next; // to return either l1 or l2
    }
}
