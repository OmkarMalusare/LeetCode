/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        
        if(lists == null || lists.length == 0)
            return null;
        
        return mergeKListsHelper(lists, 0, lists.length-1);
        
    }
    
    public ListNode mergeKListsHelper(ListNode[] lists, int start, int end){
        
        
      if(start < end){
          
          int middle = (start + end)/2;
          
           ListNode firstList = mergeKListsHelper(lists, start, middle);
           ListNode secondList = mergeKListsHelper(lists, middle + 1, end);
          
          return mergeTwoLists(firstList, secondList);
            
        }
        
        return lists[start];
    }    
    
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        
        if(l1 == null && l2 ==null)
            return null;
        
        if(l1 == null)
            return l2;
        
        if(l2 == null)
            return l1;
        
        ListNode resultList = new ListNode(-1);
        
        ListNode list1 = l1;
        ListNode list2 = l2;
        ListNode result = resultList;
        
        while(list1 !=null && list2 !=null){
            
            if(list1.val < list2.val){
                
                result.next = list1;
                list1 = list1.next;
            }                
            else{
                result.next = list2;
                list2 = list2.next;
            }
            
            result= result.next;
        }
        
        if(list1 !=null)
            result.next = list1;
        
        if(list2 !=null)
            result.next = list2;
        
            
        return resultList.next;
    }
}
